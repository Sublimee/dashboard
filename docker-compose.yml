services:
  db:
    image: postgis/postgis:14-master
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgis -d postgis"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgis
      POSTGRES_USER: postgis
      POSTGRES_PASSWORD: postgis
    volumes:
      - ./database:/var/lib/postgresql/data
      - ./dump:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - 0.0.0.0:27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - app-network
    volumes:
      - ./mongo-init:/docker-entrypoint-initdb.d:ro

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - 0.0.0.0:8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: "27017"
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    networks:
      - app-network

  myapp:
    container_name: myapp
    image: myapp:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - app-network

  api-audit-processor:
    container_name: api-audit-processor
    image: api-audit-processor:latest
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
    ports:
      - 22181:2181
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.2.0
    depends_on:
      - zookeeper
    ports:
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    restart: on-failure
    volumes:
      - ./kowl_config:/etc/kowl/
    ports:
      - "8090:8080"
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge